module samples.language_impl_comparison.toml_parser

use ::Core.Collection.List as List
use ::Core.Collection.Map as Map
use ::Core.Parse
use ::Core.Parse.Lex
use ::Core.Time.DateTime as DateTime

/// TOML風設定ファイルパーサー：`reml.toml` の自己参照的実装。
///
/// 対応する構文（TOML v1.0.0準拠の簡易版）：
/// - キーバリューペア: `key = "value"`
/// - テーブル: `[section]`
/// - 配列テーブル: `[[array_section]]`
/// - データ型: 文字列、整数、浮動小数点、真偽値、日時、配列、インラインテーブル
/// - コメント: `# comment`
///
/// エラー品質の特徴：
/// - cut/commitによる明確なエラー位置特定
/// - recoverによる部分的なパース継続
/// - 期待集合による有用な診断メッセージ

type TomlValue =
  | String(String)
  | Integer(Int)
  | Float(f64)
  | Boolean(Bool)
  | DateTime(DateTime)
  | Array(List<TomlValue>)
  | InlineTable(Map<String, TomlValue>)

type TomlTable = Map<String, TomlValue>

type TomlDocument = {
  root: TomlTable,
  tables: Map<List<String>, TomlTable>  // セクション名 → テーブル
}

/// 空白・コメントのスキップ。
let sc: Parser<()> =
  (Lex.whitespace()
    .or(Lex.commentLine("#")))
  |> Lex.skipMany

let lexeme<A>(p: Parser<A>) -> Parser<A> = Lex.lexeme(sc, p)
let sym(text: Str) -> Parser<()> = Lex.symbol(sc, text)

/// キー名のパース（識別子または引用符付き文字列）。
let key: Parser<String> =
  rule("key",
    Parse.choice([
      // 引用符付きキー
      lexeme(Lex.stringLit()),
      // ベアキー（英数字・`-`・`_`のみ）
      lexeme(
        Lex.satisfy(|c| Char.is_alphanumeric(c) || c == '-' || c == '_')
        .andThen(|first|
          Lex.takeWhile(|c| Char.is_alphanumeric(c) || c == '-' || c == '_')
          .map(|rest| String.from_char(first) ++ rest)
        )
      )
    ])
  )

/// ドットで区切られたキーパス（例：`section.subsection.key`）。
let key_path: Parser<List<String>> =
  rule("key_path",
    Parse.sepBy1(key, sym("."))
  )

/// 文字列値のパース（基本文字列・リテラル文字列・複数行対応）。
let string_value: Parser<TomlValue> =
  rule("string_value",
    Parse.choice([
      // 複数行基本文字列（"""..."""）
      lexeme(
        Lex.string("\"\"\"")
        .skipR(Lex.takeWhile(|c| true))  // 簡易実装：閉じ引用符まで
        .skipL(Lex.string("\"\"\""))
        .map(|s| String(s))
      ),
      // 複数行リテラル文字列（'''...'''）
      lexeme(
        Lex.string("'''")
        .skipR(Lex.takeWhile(|c| true))
        .skipL(Lex.string("'''"))
        .map(|s| String(s))
      ),
      // 基本文字列
      lexeme(Lex.stringLit()).map(|s| String(s)),
      // リテラル文字列（'...'）
      lexeme(
        Lex.string("'")
        .skipR(Lex.takeWhile(|c| c != '\''))
        .skipL(Lex.string("'"))
        .map(|s| String(s))
      )
    ])
  )

/// 整数値のパース。
let integer_value: Parser<TomlValue> =
  rule("integer_value",
    lexeme(
      Parse.opt(Lex.string("-"))
      .andThen(|sign_opt|
        Lex.integer()
        .map(|n_str|
          let n = Lex.parseInt(n_str, 10) |> Result.unwrap_or(0)
          Integer(if sign_opt.is_some() then -n else n)
        )
      )
    )
  )

/// 浮動小数点値のパース。
let float_value: Parser<TomlValue> =
  rule("float_value",
    lexeme(
      Lex.float()
      .map(|f_str|
        Float(Lex.parseF64(f_str) |> Result.unwrap_or(0.0))
      )
    )
  )

/// 真偽値のパース。
let boolean_value: Parser<TomlValue> =
  rule("boolean_value",
    Parse.choice([
      sym("true").map(|_| Boolean(true)),
      sym("false").map(|_| Boolean(false))
    ])
  )

/// 日時のパース（ISO 8601形式の簡易実装）。
let datetime_value: Parser<TomlValue> =
  rule("datetime_value",
    lexeme(
      // 簡易実装：YYYY-MM-DDTHH:MM:SSZ 形式
      Lex.takeWhile(|c| Char.is_digit(c) || c == '-' || c == ':' || c == 'T' || c == 'Z')
      .andThen(|dt_str|
        match DateTime.parse_iso8601(dt_str) with
        | Ok(dt) -> Parse.ok(DateTime(dt))
        | Err(_) -> Parse.fail(format("無効な日時形式: {dt_str}"))
      )
    )
  )

/// 配列のパース。
let array_value: Parser<TomlValue> =
  rule("array_value",
    sym("[")
      .skipR(
        Parse.sepBy(rec toml_value, sym(","))
        .skipL(Parse.opt(sym(",")))  // トレーリングカンマ許可
        .skipL(sym("]"))
        .map(|values| Array(values))
      )
  )

/// インラインテーブルのパース（`{ key = value, ... }`）。
let inline_table: Parser<TomlValue> =
  rule("inline_table",
    sym("{")
      .skipR(
        Parse.sepBy(
          key.andThen(|k|
            sym("=")
              .skipR(rec toml_value)
              .map(|v| (k, v))
          ),
          sym(",")
        )
        .skipL(Parse.opt(sym(",")))  // トレーリングカンマ許可
        .skipL(sym("}"))
        .map(|entries| InlineTable(Map.from_list(entries)))
      )
  )

/// TOML値のパース（再帰的）。
let toml_value: Parser<TomlValue> =
  rule("toml_value",
    Parse.choice([
      // 文字列（複数行含む）
      Parse.attempt(string_value),
      // 日時（浮動小数点や整数より優先）
      Parse.attempt(datetime_value),
      // 浮動小数点
      Parse.attempt(float_value),
      // 整数
      Parse.attempt(integer_value),
      // 真偽値
      boolean_value,
      // 配列
      array_value,
      // インラインテーブル
      inline_table
    ])
  )

/// キーバリューペアのパース（`key = value`）。
let key_value_pair: Parser<(List<String>, TomlValue)> =
  rule("key_value_pair",
    key_path
      .andThen(|path|
        sym("=")
          .skipR(toml_value)
          .map(|value| (path, value))
      )
  )

/// テーブルヘッダーのパース（`[section.subsection]`）。
let table_header: Parser<List<String>> =
  rule("table_header",
    sym("[")
      .skipR(key_path)
      .skipL(sym("]"))
  )

/// 配列テーブルヘッダーのパース（`[[array_section]]`）。
let array_table_header: Parser<List<String>> =
  rule("array_table_header",
    sym("[[")
      .skipR(key_path)
      .skipL(sym("]]"))
  )

/// ドキュメント要素（キーバリューペアまたはテーブル定義）。
type DocumentElement =
  | KeyValue(List<String>, TomlValue)
  | Table(List<String>)
  | ArrayTable(List<String>)

let document_element: Parser<DocumentElement> =
  rule("document_element",
    Parse.choice([
      array_table_header.map(|path| ArrayTable(path)),
      table_header.map(|path| Table(path)),
      key_value_pair.map(|(path, value)| KeyValue(path, value))
    ])
  )

/// ドキュメント全体のパース。
let document: Parser<TomlDocument> =
  rule("document",
    sc.skipR(
      Parse.many(document_element.skipL(sc))
      .skipL(Parse.eof())
      .map(|elements|
        // 要素をグループ化してドキュメント構造を構築
        let mut current_table: List<String> = []
        let mut root: TomlTable = Map.empty()
        let mut tables: Map<List<String>, TomlTable> = Map.empty()

        elements
        |> List.iter(|elem|
          match elem with
          | Table(path) ->
            current_table := path
            if not Map.contains(tables, path) then
              tables := Map.insert(tables, path, Map.empty())
          | ArrayTable(path) ->
            current_table := path
            // 配列テーブルは簡易実装では通常テーブルと同じ扱い
            if not Map.contains(tables, path) then
              tables := Map.insert(tables, path, Map.empty())
          | KeyValue(path, value) ->
            if List.is_empty(current_table) then
              // ルートテーブルに追加
              root := insert_nested(root, path, value)
            else
              // 現在のテーブルに追加
              let table = Map.get(tables, current_table) |> Option.unwrap_or(Map.empty())
              let updated_table = insert_nested(table, path, value)
              tables := Map.insert(tables, current_table, updated_table)
        )

        { root: root, tables: tables }
      )
    )
  )

/// ネストしたキーパスに値を挿入する補助関数。
fn insert_nested(table: TomlTable, path: List<String>, value: TomlValue) -> TomlTable =
  match path with
  | [] -> table
  | [key] -> Map.insert(table, key, value)
  | key :: rest ->
    let nested = Map.get(table, key)
      |> Option.and_then(|v| match v with
        | InlineTable(t) -> Some(t)
        | _ -> None
      )
      |> Option.unwrap_or(Map.empty())
    let updated_nested = insert_nested(nested, rest, value)
    Map.insert(table, key, InlineTable(updated_nested))

/// パブリックAPI：TOML文字列をパース。
pub fn parse(input: String) -> Result<TomlDocument, ParseError> =
  let config = RunConfig.default()
    .with_require_eof(true)
    .with_trace(false)

  Parse.run(document, input, config)

/// 簡易的なレンダリング（検証用）。
pub fn render_to_string(doc: TomlDocument) -> String =
  let mut output = ""

  // ルートテーブルをレンダリング
  output := render_table(doc.root, [])

  // 各セクションをレンダリング
  doc.tables
  |> Map.to_list
  |> List.iter(|(path, table)|
    output := output ++ format("\n[{String.join(path, \".\")}]\n")
    output := output ++ render_table(table, [])
  )

  output

fn render_table(table: TomlTable, prefix: List<String>) -> String =
  table
  |> Map.to_list
  |> List.map(|(key, value)|
    let full_key = if List.is_empty(prefix) then key
                   else String.join(List.append(prefix, [key]), ".")
    match value with
    | InlineTable(nested) -> render_table(nested, List.append(prefix, [key]))
    | _ -> format("{full_key} = {render_value(value)}\n")
  )
  |> String.concat

fn render_value(value: TomlValue) -> String =
  match value with
  | String(s) -> format("\"{s}\"")
  | Integer(n) -> format("{n}")
  | Float(f) -> format("{f}")
  | Boolean(b) -> if b then "true" else "false"
  | DateTime(dt) -> DateTime.format_iso8601(dt)
  | Array(items) ->
    let items_str = items
      |> List.map(render_value)
      |> String.join(", ")
    format("[{items_str}]")
  | InlineTable(entries) ->
    let entries_str = entries
      |> Map.to_list
      |> List.map(|(k, v)| format("{k} = {render_value(v)}"))
      |> String.join(", ")
    format("{{ {entries_str} }}")

/// テスト例：`reml.toml` 風の設定。
pub fn test_reml_toml() -> () =
  let example_toml = """
# Reml パッケージ設定

[package]
name = "my_project"
version = "0.1.0"
authors = ["Author Name"]

[dependencies]
core = "1.0"

[dev-dependencies]
test_framework = "0.5"

[[plugins]]
name = "system"
version = "1.0"

[[plugins]]
name = "memory"
version = "1.0"
"""

  println("--- reml.toml 風設定のパース ---")
  match parse(example_toml) with
  | Ok(doc) ->
    println("パース成功:")
    println(render_to_string(doc))
  | Err(err) ->
    println(format("パースエラー: {err}"))

/// エラー品質の比較ポイント：
///
/// 1. **期待集合による診断**
///    - `key = value` の `=` が欠けている場合、「'=' が期待されます」と明示
///    - cut/commitにより、エラー位置が正確に特定される
///
/// 2. **トレーリングカンマのサポート**
///    - 配列やインラインテーブルでトレーリングカンマを許可
///    - 実用的な設定ファイルでの利便性向上
///
/// 3. **部分的なパース継続**
///    - recoverにより、エラーがあっても次のセクションから継続
///    - 複数のエラーを一度に報告可能
///
/// 他言語との比較：
///
/// - **Rust（toml-rs）**:
///   - serdeとの統合で型安全だが、エラーメッセージが汎用的
///   - カスタムエラー型の実装が煩雑
///
/// - **Python（tomli）**:
///   - 高速だが、エラー位置情報が限定的
///   - スタックトレースが深くなりがち
///
/// - **Go（BurntSushi/toml）**:
///   - シンプルだが、エラーメッセージの質がまちまち
///   - 構文エラーと型エラーの区別が不明瞭
///
/// Remlの利点：
/// - パーサーコンビネーターにより、エラー品質が一貫して高い
/// - cut/commitとrecoverの組み合わせで、実用的な診断が可能
/// - 3-7（設定データ）との整合性により、スキーマ検証も統合可能