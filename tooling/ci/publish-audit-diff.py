#!/usr/bin/env python3
"""
Generate GitHub PR comment text from audit diff summary.

Usage:
    python tooling/ci/publish-audit-diff.py --diff reports/audit/review/<commit>/diff.json
"""

from __future__ import annotations

import argparse
import json
from pathlib import Path
from typing import Dict, List, Optional, Sequence


def parse_args(argv: Optional[Sequence[str]] = None) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Compose audit diff PR comment.")
    parser.add_argument(
        "--diff",
        type=Path,
        required=True,
        help="Path to diff.json generated by audit-diff.py.",
    )
    parser.add_argument(
        "--output",
        type=Path,
        help="Write comment to file instead of stdout.",
    )
    parser.add_argument(
        "--header",
        type=str,
        default="### 🔍 Audit Diff Summary",
        help="Markdown header for the comment.",
    )
    parser.add_argument(
        "--max-details",
        type=int,
        default=10,
        help="Maximum number of diagnostic detail rows to show.",
    )
    return parser.parse_args(argv)


def load_diff(path: Path) -> Dict:
    with path.open("r", encoding="utf-8") as handle:
        return json.load(handle)


def format_table(rows: List[List[str]]) -> str:
    if not rows:
        return "_差分は検出されませんでした。_\n"
    header = ["category", "code", "kind"]
    lines = ["| " + " | ".join(header) + " |", "| " + " | ".join("---" for _ in header) + " |"]
    for row in rows:
        lines.append("| " + " | ".join(row) + " |")
    return "\n".join(lines) + "\n"


def build_comment(data: Dict, header: str, max_details: int) -> str:
    diagnostic = data.get("diagnostic", {})
    metadata = data.get("metadata", {})
    pass_rate = data.get("pass_rate", {})
    base = data.get("base", {})
    target = data.get("target", {})

    regressions = int(diagnostic.get("regressions") or 0)
    metadata_changed = int(metadata.get("changed") or 0)
    delta = pass_rate.get("delta")

    status_emoji = "✅"
    if regressions > 0 or metadata_changed > 0:
        status_emoji = "⚠️"

    lines = [
        header,
        "",
        f"{status_emoji} **Regressions**: `{regressions}` / **Metadata changes**: `{metadata_changed}` / **pass_rate Δ**: `{delta}`",
        "",
        f"- Base: `{base.get('path')}` (entries: `{base.get('entry_count')}`)",
        f"- Target: `{target.get('path')}` (entries: `{target.get('entry_count')}`)",
        "",
    ]

    details = diagnostic.get("details") or []
    detail_rows: List[List[str]] = []
    for item in details[:max_details]:
        if isinstance(item, dict):
            detail_rows.append(
                [
                    str(item.get("category") or ""),
                    str(item.get("code") or ""),
                    str(item.get("kind") or ""),
                ]
            )
    lines.append("#### Diagnostic changes")
    lines.append(format_table(detail_rows))

    metadata_details = metadata.get("details") or []
    meta_rows: List[List[str]] = []
    for item in metadata_details[:max_details]:
        if isinstance(item, dict):
            base_payload = item.get("base") or {}
            target_payload = item.get("target") or {}
            changed_keys = sorted(set(base_payload.keys()) ^ set(target_payload.keys()))
            meta_rows.append(
                [
                    str(item.get("category") or ""),
                    str(item.get("code") or ""),
                    ", ".join(changed_keys) if changed_keys else "(値のみ変更)",
                ]
            )
    lines.append("#### Metadata changes")
    lines.append(format_table(meta_rows))

    if len(details) > max_details:
        lines.append(f"_他 {len(details) - max_details} 件は diff.json を参照してください。_")
    if len(metadata_details) > max_details:
        lines.append(f"_他 {len(metadata_details) - max_details} 件は diff.json を参照してください。_")

    return "\n".join(lines).rstrip() + "\n"


def main(argv: Optional[Sequence[str]] = None) -> int:
    args = parse_args(argv)
    data = load_diff(args.diff)
    comment = build_comment(data, args.header, args.max_details)
    if args.output:
        args.output.parent.mkdir(parents=True, exist_ok=True)
        args.output.write_text(comment, encoding="utf-8")
    else:
        print(comment, end="")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
